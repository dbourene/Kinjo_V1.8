#!/bin/bash

# =============================================================================
# KINJO APP - D√âPLOIEMENT AUTOMATIQUE VERS GITHUB
# Repository: dbourene/Kinjo_V1.2
# Version du 15 Janvier 2025 - 06:30 UTC
# =============================================================================

echo "üöÄ D√©ploiement automatique de Kinjo Energy Platform vers GitHub..."
echo "üìã Repository: dbourene/Kinjo_V1.2"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
print_step() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    print_error "Ce script doit √™tre ex√©cut√© dans le r√©pertoire racine du projet Kinjo"
    echo "üìÅ Assurez-vous d'√™tre dans le dossier contenant package.json"
    exit 1
fi

print_step "V√©rification de la structure du projet..."

# V√©rifier les fichiers critiques
REQUIRED_FILES=("src/App.tsx" "src/pages/Registration.tsx" "src/pages/Home.tsx" "src/lib/supabase.ts")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        print_error "Fichier critique manquant: $file"
        exit 1
    fi
done

print_success "Structure du projet valid√©e"

# Cr√©er .gitignore si il n'existe pas
if [ ! -f ".gitignore" ]; then
    print_step "Cr√©ation du .gitignore..."
    cat > .gitignore << 'EOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production build
dist/
build/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
logs/
*.log

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# Supabase
.supabase/
EOF
    print_success ".gitignore cr√©√©"
fi

# Cr√©er .env.example si il n'existe pas
if [ ! -f ".env.example" ]; then
    print_step "Cr√©ation du .env.example..."
    cat > .env.example << 'EOF'
# Supabase Configuration
VITE_SUPABASE_URL=your_supabase_url_here
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Email Configuration (pour tests)
VITE_USE_MAILTRAP=true
EOF
    print_success ".env.example cr√©√©"
fi

# Cr√©er README.md complet
print_step "Cr√©ation du README.md..."
cat > README.md << 'EOF'
# üå± Kinjo - Plateforme d'√ânergie Renouvelable

Plateforme de connexion entre producteurs et consommateurs d'√©nergie renouvelable.

## ‚ú® Fonctionnalit√©s

- üè≠ **Inscription Producteurs** : Particuliers et entreprises avec gestion des installations
- üè† **Inscription Consommateurs** : Gestion compl√®te des profils
- üè¢ **Validation Entreprises** : Int√©gration API INSEE pour validation SIRET automatique
- ‚ö° **Gestion Installations** : PRM (14 chiffres), puissance (kWc), tarification (ct‚Ç¨/kWh)
- üîí **S√©curit√©** : Politiques Row Level Security (RLS) Supabase
- üì± **Interface Moderne** : React + TypeScript + Tailwind CSS

## üöÄ Installation Rapide

```bash
# Cloner le repository
git clone https://github.com/dbourene/Kinjo_V1.2.git
cd Kinjo_V1.2

# Installation automatique
chmod +x QUICK_RECOVERY.sh
./QUICK_RECOVERY.sh

# D√©marrer l'application
npm run dev
```

## üìä Architecture

### Frontend
- **React 18** avec TypeScript
- **Tailwind CSS** pour le styling
- **React Router** pour la navigation
- **Vite** comme bundler

### Backend
- **Supabase** : Base de donn√©es PostgreSQL
- **Edge Functions** : API INSEE pour validation entreprises
- **Row Level Security** : S√©curit√© au niveau des lignes

### Tables Principales
- `producteurs` : Donn√©es des producteurs d'√©nergie
- `consommateurs` : Donn√©es des consommateurs
- `installations` : Installations de production (PRM, puissance, tarifs)

## üîß Configuration

1. Copier `.env.example` vers `.env`
2. Configurer les variables Supabase
3. Appliquer les migrations SQL (15 migrations)
4. D√©ployer les edge functions

### Variables d'Environnement

```env
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
VITE_USE_MAILTRAP=true  # Mode test pour les emails
```

## üìö Documentation

- [üìã Script de R√©cup√©ration](KINJO_BACKUP_SCRIPT.md)
- [‚úÖ Checklist D√©ploiement](DEPLOYMENT_CHECKLIST.md)
- [üöÄ D√©ploiement GitHub](DEPLOY_TO_GITHUB.md)

## üéØ Fonctionnalit√©s D√©taill√©es

### Inscription Producteur
1. **S√©lection type** : Particulier ou Entreprise
2. **Validation entreprise** : SIRET + r√©cup√©ration automatique des donn√©es INSEE
3. **Contact** : Informations personnelles ou contact entreprise
4. **Installation** : 
   - PRM (Point de R√©f√©rence et de Mesure) - 14 chiffres
   - Puissance en kWc (kilowatts-cr√™te)
   - Tarif de vente en ct‚Ç¨/kWh
5. **Sauvegarde** : Directe en base dans `producteurs` et `installations`

### Inscription Consommateur
1. **Profil** : Particulier ou Entreprise
2. **Validation** : M√™me syst√®me que producteurs
3. **Sauvegarde** : Table `consommateurs`

### S√©curit√©
- **RLS Policies** : Chaque utilisateur ne voit que ses donn√©es
- **Validation** : Contraintes sur formats email, t√©l√©phone, SIRET, PRM
- **API S√©curis√©e** : Edge functions pour appels externes

## üéØ Version Actuelle

**v1.2.0** - Production Ready (15 Janvier 2025)

‚úÖ **Fonctionnalit√©s Valid√©es:**
- Flux d'inscription producteur/consommateur complet
- Int√©gration API INSEE fonctionnelle
- Base de donn√©es s√©curis√©e avec RLS
- Gestion installations avec tarification dans table installations
- Politiques RLS corrig√©es et optimis√©es
- Tests complets valid√©s

## üõ†Ô∏è D√©veloppement

```bash
# D√©marrer en mode d√©veloppement
npm run dev

# Construire pour la production
npm run build

# Pr√©visualiser le build
npm run preview

# Linter
npm run lint
```

## üìû Support

Pour toute question ou probl√®me :
1. Consulter la documentation
2. V√©rifier les issues GitHub
3. Utiliser le script de v√©rification de la base de donn√©es

## ü§ù Contribution

1. Fork le projet
2. Cr√©er une branche feature (`git checkout -b feature/AmazingFeature`)
3. Commit les changements (`git commit -m 'Add AmazingFeature'`)
4. Push vers la branche (`git push origin feature/AmazingFeature`)
5. Ouvrir une Pull Request

## üìÑ Licence

Ce projet est sous licence MIT.

---

**D√©velopp√© avec ‚ù§Ô∏è pour l'√©nergie renouvelable**
EOF

print_success "README.md cr√©√©"

# Initialiser Git si ce n'est pas d√©j√† fait
if [ ! -d ".git" ]; then
    print_step "Initialisation de Git..."
    git init
    print_success "Git initialis√©"
else
    print_warning "Repository Git d√©j√† initialis√©"
fi

# Configurer la branche principale
print_step "Configuration de la branche principale..."
git branch -M main

# Ajouter tous les fichiers
print_step "Ajout des fichiers au repository..."
git add .

# V√©rifier s'il y a des changements √† commiter
if git diff --staged --quiet; then
    print_warning "Aucun changement d√©tect√©, v√©rification du statut..."
    git status
else
    print_success "Changements d√©tect√©s, pr√©paration du commit..."
fi

# Commit avec un message d√©taill√©
print_step "Cr√©ation du commit..."
git commit -m "üéâ Kinjo Energy Platform v1.2.0 - Production Ready

‚úÖ Fonctionnalit√©s principales:
- üè≠ Inscription producteur (particulier/entreprise) avec installations
- üè† Inscription consommateur (particulier/entreprise)
- üè¢ Int√©gration API INSEE pour validation SIRET automatique
- ‚ö° Gestion compl√®te des installations (PRM, puissance, tarification)
- üîí S√©curit√© RLS Supabase avec politiques optimis√©es
- üì± Interface React + TypeScript + Tailwind CSS

üóÑÔ∏è Base de donn√©es:
- Tables: producteurs, consommateurs, installations
- 15 migrations SQL appliqu√©es
- Stockage tarifs dans installations.tarif_base
- Politiques RLS s√©curis√©es et test√©es

üîß Corrections techniques:
- Flux d'inscription producteur corrig√©
- Gestion m√©tadonn√©es utilisateur am√©lior√©e
- Insertion installations avec tarification
- Politiques RLS optimis√©es
- Contraintes de validation renforc√©es

üéØ Tests valid√©s:
- Inscription producteur particulier ‚úÖ
- Inscription producteur entreprise ‚úÖ
- Inscription consommateur particulier ‚úÖ
- Inscription consommateur entreprise ‚úÖ
- API INSEE fonctionnelle ‚úÖ
- Sauvegarde en base de donn√©es ‚úÖ

üìÖ Version: 1.2.0 - 15 Janvier 2025
üöÄ Status: Production Ready
üë®‚Äçüíª D√©veloppeur: dbourene"

if [ $? -eq 0 ]; then
    print_success "Commit cr√©√© avec succ√®s"
else
    print_error "Erreur lors du commit"
    exit 1
fi

# Ajouter le remote GitHub
print_step "Configuration du remote GitHub..."
if git remote get-url origin >/dev/null 2>&1; then
    print_warning "Remote origin d√©j√† configur√©"
    git remote set-url origin https://github.com/dbourene/Kinjo_V1.2.git
    print_success "Remote origin mis √† jour"
else
    git remote add origin https://github.com/dbourene/Kinjo_V1.2.git
    print_success "Remote origin ajout√©"
fi

# Pousser vers GitHub
print_step "Push vers GitHub..."
echo "üîÑ Envoi du code vers https://github.com/dbourene/Kinjo_V1.2..."

git push -u origin main

if [ $? -eq 0 ]; then
    print_success "Code pouss√© avec succ√®s vers GitHub!"
else
    print_error "Erreur lors du push vers GitHub"
    echo ""
    echo "üîß Solutions possibles:"
    echo "1. V√©rifiez que le repository existe sur GitHub:"
    echo "   https://github.com/dbourene/Kinjo_V1.2"
    echo ""
    echo "2. Si le repository n'existe pas, cr√©ez-le sur GitHub:"
    echo "   - Allez sur https://github.com/new"
    echo "   - Nom: Kinjo_V1.2"
    echo "   - Description: Plateforme d'√©nergie renouvelable"
    echo "   - Public ou Private selon votre pr√©f√©rence"
    echo "   - NE PAS initialiser avec README, .gitignore ou licence"
    echo ""
    echo "3. Puis relancez ce script"
    exit 1
fi

# Cr√©er un tag de version
print_step "Cr√©ation du tag de version..."
git tag -a v1.2.0 -m "Version 1.2.0 - Production Ready

üéØ Fonctionnalit√©s compl√®tes:
- Inscription producteur/consommateur avec installations
- Int√©gration API INSEE pour entreprises
- Base de donn√©es s√©curis√©e avec RLS
- Gestion tarification dans installations
- Interface moderne React + TypeScript

‚úÖ Tests valid√©s et pr√™t pour la production"

git push origin v1.2.0

if [ $? -eq 0 ]; then
    print_success "Tag v1.2.0 cr√©√© et pouss√©"
else
    print_warning "Erreur lors de la cr√©ation du tag (non critique)"
fi

echo ""
echo "üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!"
echo ""
echo "üìã R√©sum√©:"
echo "   ‚Ä¢ Repository: https://github.com/dbourene/Kinjo_V1.2"
echo "   ‚Ä¢ Branche: main"
echo "   ‚Ä¢ Version: v1.2.0"
echo "   ‚Ä¢ Commit: Kinjo Energy Platform v1.2.0 - Production Ready"
echo ""
echo "üîó Liens utiles:"
echo "   ‚Ä¢ Repository: https://github.com/dbourene/Kinjo_V1.2"
echo "   ‚Ä¢ Releases: https://github.com/dbourene/Kinjo_V1.2/releases"
echo "   ‚Ä¢ Issues: https://github.com/dbourene/Kinjo_V1.2/issues"
echo ""
echo "üìä Contenu d√©ploy√©:"
echo "   ‚Ä¢ ‚úÖ Code source complet (React + TypeScript)"
echo "   ‚Ä¢ ‚úÖ Migrations Supabase (15 fichiers)"
echo "   ‚Ä¢ ‚úÖ Edge functions (API INSEE)"
echo "   ‚Ä¢ ‚úÖ Documentation compl√®te"
echo "   ‚Ä¢ ‚úÖ Scripts d'installation"
echo "   ‚Ä¢ ‚úÖ Assets et images"
echo ""
echo "üöÄ Prochaines √©tapes:"
echo "   1. V√©rifiez le repository sur GitHub"
echo "   2. Configurez les secrets pour le d√©ploiement (si n√©cessaire)"
echo "   3. Testez le clonage et l'installation"
echo "   4. Partagez le lien avec votre √©quipe"
echo ""
echo "üéØ Votre application Kinjo est maintenant sur GitHub!"
echo "   Repository: https://github.com/dbourene/Kinjo_V1.2"